"key","category","type","regex","default","description"
"spark.acls.enable","SparkOptional","Boolean",,"false","Whether Spark acls should be enabled. If enabled,this checks to see if the user has access permissions to view or modify the job. Note this requires the user to be known,so if the user comes across as null no checks are done. Filters can be used with the UI to authenticate and set the user. "
"spark.admin.acls","SparkOptional","StringList",,,"Comma separated list of users/administrators that have view and modify access to all Spark jobs. This can be used if you run on a shared cluster and have a set of administrators or devs who help debug when things do not work. Putting a '*' in the list means any user can have the privilege of admin. "
"spark.admin.acls.groups","SparkOptional","StringList",,,"Comma separated list of groups that have view and modify access to all Spark jobs. This can be used if you have a set of administrators or developers who help maintain and debug the underlying infrastructure. Putting a '*' in the list means any user in any group can have the privilege of admin. The user groups are obtained from the instance of the groups mapping provider specified by <code>spark.user.groups.mapping</code>. Check the entry <code>spark.user.groups.mapping</code> for more details. "
"spark.app.name","SparkMandatory","String","^[a-zA-Z0-9-]+$",,"The name of your application. This will appear in the UI and in log data. "
"spark.authenticate","SparkOptional","Boolean",,"false","Whether Spark authenticates its internal connections. See <code>spark.authenticate.secret</code> if not running on YARN. "
"spark.authenticate.enableSaslEncryption","SparkOptional","Boolean",,"false","Enable encrypted communication when authentication is enabled. This is supported by the block transfer service and the RPC endpoints. "
"spark.authenticate.secret","SparkOptional","String",,,"Set the secret key used for Spark to authenticate between components. This needs to be set if not running on YARN and authentication is enabled. "
"spark.blacklist.enabled","SparkOptional","Boolean",,"false ","If set to 'true',prevent Spark from scheduling tasks on executors that have been blacklisted due to too many task failures. The blacklisting algorithm can be further controlled by the other 'spark.blacklist' configuration options. "
"spark.blacklist.stage.maxFailedExecutorsPerNode","SparkOptional","NonNegativeInteger",,"2","(Experimental) How many different executors are marked as blacklisted for a given stage,before the entire node is marked as failed for the stage. "
"spark.blacklist.stage.maxFailedTasksPerExecutor","SparkOptional","NonNegativeInteger",,"2","(Experimental) How many different tasks must fail on one executor,within one stage,before the executor is blacklisted for that stage. "
"spark.blacklist.task.maxTaskAttemptsPerExecutor","SparkOptional","NonNegativeInteger",,"1","(Experimental) For a given task,how many times it can be retried on one executor before the executor is blacklisted for that task. "
"spark.blacklist.task.maxTaskAttemptsPerNode","SparkOptional","NonNegativeInteger",,"2","(Experimental) For a given task,how many times it can be retried on one node,before the entire node is blacklisted for that task. "
"spark.blockManager.port","SparkOptional","NonNegativeInteger",,,"Port for all block managers to listen on. These exist on both the driver and the executors. "
"spark.broadcast.blockSize","SparkOptional","ByteSize",,"4m","Size of each piece of a block for <code>TorrentBroadcastFactory</code>. Too large a value decreases parallelism during broadcast (makes it slower); however,if it is too small,<code>BlockManager</code> might take a performance hit. "
"spark.broadcast.compress","SparkOptional","Boolean",,"true","Whether to compress broadcast variables before sending them. Generally a good idea. "
"spark.client.version","SparkMandatory","String","^\d+(\.\d)+$","2.1.0","The Spark version used by the target cluster."
"spark.core.connection.ack.wait.timeout","SparkOptional","Duration",,"120s","How long for the connection to wait for ack to occur before timing out and giving up. To avoid unwilling timeout caused by long pause like GC, you can set larger value."
"spark.core.connection.auth.wait.timeout","SparkOptional","Duration",,"30s","How long for the connection to wait for authentication to occur before timing out and giving up. "
"spark.cores.max","SparkOptional","NonNegativeInteger",,,"When running on a <a href='spark-standalone.html'>standalone deploy cluster</a> or a <a href='running-on-mesos.html#mesos-run-modes'>Mesos cluster in 'coarse-grained' sharing mode</a>,the maximum amount of CPU cores to request for the application from across the cluster (not from each machine). If not set,the default will be <code>spark.deploy.defaultCores</code> on Spark's standalone cluster manager,or infinite (all available cores) on Mesos. "
"spark.default.parallelism","SparkMandatory","NonNegativeInteger",,,"Default number of partitions in RDDs returned by transformations like join, reduceByKey, and parallelize when not set by user. For distributed shuffle operations like reduceByKey and join, the largest number of partitions in a parent RDD. For operations like parallelize with no parent RDDs, it depends on the cluster manager: Local mode: number of cores on the local machine Mesos fine grained mode: 8 Others: total number of cores on all executor nodes or 2, whichever is larger."
"spark.deploy.recoveryMode","SparkOptional","Enum","^(ZOOKEEPER|FILESYSTEM|CUSTOM|NONE)$","NONE","The recovery mode setting to recover submitted Spark jobs with cluster mode when it failed and relaunches. This is only applicable for cluster mode when running with Standalone or Mesos. "
"spark.deploy.zookeeper.dir","SparkOptional","String","^/((\w|\d)+/)+$",,"When `spark.deploy.recoveryMode` is set to ZOOKEEPER,this configuration is used to set the zookeeper directory to store recovery state. "
"spark.deploy.zookeeper.url","SparkOptional","String","^((\d+)(.\d+){3,3}|localhost|([a-z\d][a-z\d-]*(\.[a-z\d][a-z\d-]*)*\.[a-z\d]{2,6})):\d+$",,"When `spark.deploy.recoveryMode` is set to ZOOKEEPER,this configuration is used to set the zookeeper URL to connect to. "
"spark.driver.bindAddress","SparkOptional","String","^((\d+)(.\d+){3,3}|localhost|([a-z\d][a-z\d-]*(\.[a-z\d][a-z\d-]*)*\.[a-z\d]{2,6}))$",,"<p>Hostname or IP address where to bind listening sockets. This config overrides the SPARK_LOCAL_IP environment variable (see below).</p> <p>It also allows a different address from the local one to be advertised to executors or external systems. This is useful,for example,when running containers with bridged networking. For this to properly work,the different ports used by the driver (RPC,block manager and UI) need to be forwarded from the container's host.</p>  (value of spark.driver.host)"
"spark.driver.blockManager.port","SparkOptional","NonNegativeInteger",,,"Driver-specific port for the block manager to listen on,for cases where it cannot use the same configuration as executors.  (value of spark.blockManager.port)"
"spark.driver.cores","SparkMandatory","NonNegativeInteger",,"1","Number of cores to use for the driver process,only in cluster mode. "
"spark.driver.extraClassPath","SparkOptional","String",,,"Extra classpath entries to prepend to the classpath of the driver. <br><em>Note:</em> In client mode,this config must not be set through the <code>SparkConf</code> directly in your application,because the driver JVM has already started at that point. Instead,please set this through the <code>--driver-class-path</code> command line option or in your default properties file. "
"spark.driver.extraJavaOptions","SparkOptional","String",,,"A string of extra JVM options to pass to the driver. For instance,GC settings or other logging. Note that it is illegal to set maximum heap size (-Xmx) settings with this option. Maximum heap size settings can be set with <code>spark.driver.memory</code> in the cluster mode and through the <code>--driver-memory</code> command line option in the client mode. <br><em>Note:</em> In client mode,this config must not be set through the <code>SparkConf</code> directly in your application,because the driver JVM has already started at that point. Instead,please set this through the <code>--driver-java-options</code> command line option or in your default properties file. "
"spark.driver.extraLibraryPath","SparkOptional","String",,,"Set a special library path to use when launching the driver JVM. <br><em>Note:</em> In client mode,this config must not be set through the <code>SparkConf</code> directly in your application,because the driver JVM has already started at that point. Instead,please set this through the <code>--driver-library-path</code> command line option or in your default properties file. "
"spark.driver.host","SparkOptional","String","^((\d+)(.\d+){3,3}|localhost|([a-z\d][a-z\d-]*(\.[a-z\d][a-z\d-]*)*\.[a-z\d]{2,6}))$",,"Hostname or IP address for the driver. This is used for communicating with the executors and the standalone Master. "
"spark.driver.maxResultSize","SparkMandatory","ByteSize",,"1g","Limit of total size of serialized results of all partitions for each Spark action (e.g. collect). Should be at least 1M,or 0 for unlimited. Jobs will be aborted if the total size is above this limit. Having a high limit may cause out-of-memory errors in driver (depends on spark.driver.memory and memory overhead of objects in JVM). Setting a proper limit can protect the driver from out-of-memory errors. "
"spark.driver.memory","SparkMandatory","ByteSize",,"1g","Amount of memory to use for the driver process,i.e. where SparkContext is initialized. (e.g. <code>1g</code>,<code>2g</code>). <br><em>Note:</em> In client mode,this config must not be set through the <code>SparkConf</code> directly in your application,because the driver JVM has already started at that point. Instead,please set this through the <code>--driver-memory</code> command line option or in your default properties file. "
"spark.driver.port","SparkOptional","NonNegativeInteger",,,"Port for the driver to listen on. This is used for communicating with the executors and the standalone Master. "
"spark.driver.userClassPathFirst","SparkOptional","Boolean",,"false","(Experimental) Whether to give user-added jars precedence over Spark's own jars when loading classes in the driver. This feature can be used to mitigate conflicts between Spark's dependencies and user dependencies. It is currently an experimental feature. This is used in cluster mode only. "
"spark.dynamicAllocation.cachedExecutorIdleTimeout","SparkOptional","NonNegativeInteger",,"2147483647","If dynamic allocation is enabled and an executor which has cached data blocks has been idle for more than this duration,the executor will be removed. For more details,see this <a href='job-scheduling.html#resource-allocation-policy'>description</a>. "
"spark.dynamicAllocation.enabled","SparkOptional","Boolean",,"false","Whether to use dynamic resource allocation,which scales the number of executors registered with this application up and down based on the workload. For more detail,see the description <a href='job-scheduling.html#dynamic-resource-allocation'>here</a>. <br><br> This requires <code>spark.shuffle.service.enabled</code> to be set. The following configurations are also relevant: <code>spark.dynamicAllocation.minExecutors</code>,<code>spark.dynamicAllocation.maxExecutors</code>,and <code>spark.dynamicAllocation.initialExecutors</code> "
"spark.dynamicAllocation.executorIdleTimeout","SparkOptional","Duration",,"60s","If dynamic allocation is enabled and an executor has been idle for more than this duration,the executor will be removed. For more detail,see this <a href='job-scheduling.html#resource-allocation-policy'>description</a>. "
"spark.dynamicAllocation.maxExecutors","SparkOptional","NonNegativeInteger",,"2147483647","Upper bound for the number of executors if dynamic allocation is enabled. "
"spark.dynamicAllocation.minExecutors","SparkOptional","NonNegativeInteger",,"0","Lower bound for the number of executors if dynamic allocation is enabled. "
"spark.dynamicAllocation.schedulerBacklogTimeout","SparkOptional","Duration",,"1s","If dynamic allocation is enabled and there have been pending tasks backlogged for more than this duration,new executors will be requested. For more detail,see this <a href='job-scheduling.html#resource-allocation-policy'>description</a>. "
"spark.dynamicAllocation.sustainedSchedulerBacklogTimeout","SparkOptional","Duration",,"1s","Same as spark.dynamicAllocation.schedulerBacklogTimeout, but used only for subsequent executor requests. For more detail, see this description."
"spark.eventLog.compress","SparkOptional","Boolean",,"false","Whether to compress logged events,if <code>spark.eventLog.enabled</code> is true. "
"spark.eventLog.dir","SparkOptional","Uri(file)",,"file:///tmp/spark-events","Base directory in which Spark events are logged,if <code>spark.eventLog.enabled</code> is true. Within this base directory,Spark creates a sub-directory for each application,and logs the events specific to the application in this directory. Users may want to set this to a unified location like an HDFS directory so history files can be read by the history server. "
"spark.eventLog.enabled","SparkOptional","Boolean",,"false","Whether to log Spark events,useful for reconstructing the Web UI after the application has finished. "
"spark.executor.cores","SparkMandatory","NonNegativeInteger",,"1","all the available cores on the worker in standalone and Mesos coarse-grained modes. ,The number of cores to use on each executor. In standalone and Mesos coarse-grained modes,setting this parameter allows an application to run multiple executors on the same worker,provided that there are enough cores on that worker. Otherwise,only one executor per application will run on each worker. "
"spark.executor.extraClassPath","SparkOptional","String",,,"Extra classpath entries to prepend to the classpath of executors. This exists primarily for backwards-compatibility with older versions of Spark. Users typically should not need to set this option. "
"spark.executor.extraJavaOptions","SparkOptional","String",,,"A string of extra JVM options to pass to executors. For instance,GC settings or other logging. Note that it is illegal to set Spark properties or maximum heap size (-Xmx) settings with this option. Spark properties should be set using a SparkConf object or the spark-defaults.conf file used with the spark-submit script. Maximum heap size settings can be set with spark.executor.memory. "
"spark.executor.extraLibraryPath","SparkOptional","String",,,"Set a special library path to use when launching executor JVM's. "
"spark.executor.heartbeatInterval","SparkOptional","Duration",,"10s","Interval between each executor's heartbeats to the driver. Heartbeats let the driver know that the executor is still alive and update it with metrics for in-progress tasks. spark.executor.heartbeatInterval should be significantly less than spark.network.timeout "
"spark.executor.logs.rolling.enableCompression","SparkOptional","Boolean",,"false","Enable executor log compression. If it is enabled,the rolled executor logs will be compressed. Disabled by default. "
"spark.executor.logs.rolling.maxRetainedFiles","SparkOptional","NonNegativeInteger",,,"Sets the number of latest rolling log files that are going to be retained by the system. Older log files will be deleted. Disabled by default. "
"spark.executor.logs.rolling.maxSize","SparkOptional","NonNegativeInteger",,,"Set the max size of the file in bytes by which the executor logs will be rolled over. Rolling is disabled by default. See <code>spark.executor.logs.rolling.maxRetainedFiles</code> for automatic cleaning of old logs. "
"spark.executor.logs.rolling.strategy","SparkOptional","Enum","^(time|size)$",,"Set the strategy of rolling of executor logs. By default it is disabled. It can be set to 'time' (time-based rolling) or 'size' (size-based rolling). For 'time',use <code>spark.executor.logs.rolling.time.interval</code> to set the rolling interval. For 'size',use <code>spark.executor.logs.rolling.maxSize</code> to set the maximum file size for rolling. "
"spark.executor.logs.rolling.time.interval","SparkOptional","Enum","^(daily|hourly|minutely|\d+)$","daily","Set the time interval by which the executor logs will be rolled over. Rolling is disabled by default. Valid values are <code>daily</code>,<code>hourly</code>,<code>minutely</code> or any interval in seconds. See <code>spark.executor.logs.rolling.maxRetainedFiles</code> for automatic cleaning of old logs. "
"spark.executor.memory","SparkMandatory","ByteSize",,"1g","Amount of memory to use per executor process (e.g. <code>2g</code>,<code>8g</code>). "
"spark.executor.userClassPathFirst","SparkOptional","Boolean",,"false","(Experimental) Same functionality as <code>spark.driver.userClassPathFirst</code>,but applied to executor instances. "
"spark.executorEnv.HADOOP_CONF_DIR","SparkOptional","String","^/((\w|\d)+/)+$",,"to point Spark towards Hadoop configuration files"
"spark.executorEnv.SPARK_CLASSPATH","SparkOptional","String",,,"default classpath entries to append"
"spark.executorEnv.SPARK_CONF_DIR","SparkOptional","String",,"${SPARK_HOME}/conf","Alternate conf dir."
"spark.executorEnv.SPARK_DAEMON_JAVA_OPTS","SparkOptional","String",,,"to set config properties for all daemons (e.g. ""-Dx=y"")"
"spark.executorEnv.SPARK_DAEMON_MEMORY","SparkOptional","ByteSize",,"1g","to allocate to the master, worker and history server themselves."
"spark.executorEnv.SPARK_DRIVER_MEMORY","SparkOptional","ByteSize",,"1g","Memory for Driver (e.g. 1000M, 2G)"
"spark.executorEnv.SPARK_EXECUTOR_CORES","SparkOptional","NonNegativeInteger",,"1","Number of cores for the executors."
"spark.executorEnv.SPARK_EXECUTOR_INSTANCES","SparkOptional","NonNegativeInteger",,"2","Number of executors to start"
"spark.executorEnv.SPARK_EXECUTOR_MEMORY","SparkOptional","ByteSize",,"1g","Memory per Executor (e.g. 1000M, 2G)"
"spark.executorEnv.SPARK_HISTORY_OPTS","SparkOptional","String",,,"to set config properties only for the history server (e.g. ""-Dx=y"")"
"spark.executorEnv.SPARK_IDENT_STRING","SparkOptional","String",,"$USER","A string representing this instance of spark."
"spark.executorEnv.SPARK_LOCAL_DIRS","SparkOptional","StringList",,,"storage directories to use on this node for shuffle and RDD data"
"spark.executorEnv.SPARK_LOCAL_IP","SparkOptional","String","^(\d+)(:\d+){3,3}$",,"to set the IP address Spark binds to on this node"
"spark.executorEnv.SPARK_LOG_DIR","SparkOptional","String",,"${SPARK_HOME}/logs","Where log files are stored."
"spark.executorEnv.SPARK_MASTER_HOST","SparkOptional","String","^((\d+)(.\d+){3,3}|localhost|([a-z\d][a-z\d-]*(\.[a-z\d][a-z\d-]*)*\.[a-z\d]{2,6}))$",,"to bind the master to a different IP address or hostname"
"spark.executorEnv.SPARK_MASTER_OPTS","SparkOptional","String",,,"to set config properties only for the master (e.g. ""-Dx=y"")"
"spark.executorEnv.SPARK_MASTER_PORT","SparkOptional","NonNegativeInteger",,,"to use non-default ports for the master"
"spark.executorEnv.SPARK_MASTER_WEBUI_PORT","SparkOptional","NonNegativeInteger",,,"to use non-default ports for the master webui"
"spark.executorEnv.SPARK_NICENESS","SparkOptional","NonNegativeInteger",,"0","The scheduling priority for daemons."
"spark.executorEnv.SPARK_NO_DAEMONIZE","SparkOptional","Boolean",,"false","Run the proposed command in the foreground. It will not output a PID file."
"spark.executorEnv.SPARK_PID_DIR","SparkOptional","String",,"/tmp","Where the pid file is stored."
"spark.executorEnv.SPARK_PUBLIC_DNS","SparkOptional","String",,,"to set the public dns name of the master or workers"
"spark.executorEnv.SPARK_SHUFFLE_OPTS","SparkOptional","String",,,"to set config properties only for the external shuffle service (e.g. ""-Dx=y"")"
"spark.executorEnv.SPARK_WORKER_CORES","SparkOptional","NonNegativeInteger",,,"to set the number of cores to use on this machine"
"spark.executorEnv.SPARK_WORKER_DIR","SparkOptional","String","^/((\w|\d)+/)+$",,"to set the working directory of worker processes"
"spark.executorEnv.SPARK_WORKER_INSTANCES","SparkOptional","NonNegativeInteger",,,"to set the number of worker processes per node"
"spark.executorEnv.SPARK_WORKER_MEMORY","SparkOptional","ByteSize",,,"to set how much total memory workers have to give executors (e.g. 1000m, 2g)"
"spark.executorEnv.SPARK_WORKER_OPTS","SparkOptional","String",,,"to set config properties only for the worker (e.g. ""-Dx=y"")"
"spark.executorEnv.SPARK_WORKER_PORT","SparkOptional","NonNegativeInteger",,,"to use non-default ports for the worker"
"spark.executorEnv.SPARK_WORKER_WEBUI_PORT","SparkOptional","NonNegativeInteger",,,"to use non-default ports for the worker webui"
"spark.extraListeners","SparkOptional","StringList","^([a-zA-Z_$][a-zA-Z\d_$]*\.)*[a-zA-Z_$][a-zA-Z\d_$]+$",,"A comma-separated list of classes that implement <code>SparkListener</code>; when initializing SparkContext,instances of these classes will be created and registered with Spark's listener bus. If a class has a single-argument constructor that accepts a SparkConf,that constructor will be called; otherwise,a zero-argument constructor will be called. If no valid constructor can be found,the SparkContext creation will fail with an exception. "
"spark.files","SparkRecommended","StringList",,,"Comma-separated list of local jars to include on the driver and executor classpaths."
"spark.files.fetchTimeout","SparkOptional","Duration",,"60s","Communication timeout to use when fetching files added through SparkContext.addFile() from the driver. "
"spark.files.maxPartitionBytes","SparkOptional","NonNegativeInteger",,"134217728","The maximum number of bytes to pack into a single partition when reading files. "
"spark.files.openCostInBytes","SparkOptional","NonNegativeInteger",,"4194304","The estimated cost to open a file,measured by the number of bytes could be scanned in the same time. This is used when putting multiple files into a partition. It is better to over estimate,then the partitions with small files will be faster than partitions with bigger files. "
"spark.files.overwrite","SparkRecommended","Boolean",,"false","Whether to overwrite files added through SparkContext.addFile() when the target file exists and its contents do not match those of the source. "
"spark.files.useFetchCache","SparkOptional","Boolean",,"true","If set to true (default),file fetching will use a local cache that is shared by executors that belong to the same application,which can improve task launching performance when running many executors on the same host. If set to false,these caching optimizations will be disabled and all executors will fetch their own copies of files. This optimization may be disabled in order to use Spark local directories that reside on NFS filesystems (see <a href='https://issues.apache.org/jira/browse/SPARK-6313'>SPARK-6313</a> for more details). "
"spark.hadoop.cloneConf","SparkOptional","Boolean",,"false","If set to true,clones a new Hadoop <code>Configuration</code> object for each task. This option should be enabled to work around <code>Configuration</code> thread-safety issues (see <a href='https://issues.apache.org/jira/browse/SPARK-2546'>SPARK-2546</a> for more details). This is disabled by default in order to avoid unexpected performance regressions for jobs that are not affected by these issues. "
"spark.hadoop.validateOutputSpecs","SparkOptional","Boolean",,"true","If set to true,validates the output specification (e.g. checking if the output directory already exists) used in saveAsHadoopFile and other variants. This can be disabled to silence exceptions due to pre-existing output directories. We recommend that users do not disable this except if trying to achieve compatibility with previous versions of Spark. Simply use Hadoop's FileSystem API to delete output directories by hand. This setting is ignored for jobs generated through Spark Streaming's StreamingContext,since data may need to be rewritten to pre-existing output directories during checkpoint recovery. "
"spark.io.compression.codec","SparkOptional","Enum","^(lz4|snappy|lzf)$","lz4","The codec used to compress internal data such as RDD partitions,broadcast variables and shuffle outputs. By default,Spark provides three codecs: <code>lz4</code>,<code>lzf</code>,and <code>snappy</code>. You can also use fully qualified class names to specify the codec,e.g. <code>org.apache.spark.io.LZ4CompressionCodec</code>,<code>org.apache.spark.io.LZFCompressionCodec</code>,and <code>org.apache.spark.io.SnappyCompressionCodec</code>. "
"spark.io.compression.lz4.blockSize","SparkOptional","ByteSize",,"32k","Block size used in LZ4 compression,in the case when LZ4 compression codec is used. Lowering this block size will also lower shuffle memory usage when LZ4 is used. "
"spark.io.compression.snappy.blockSize","SparkOptional","ByteSize",,"32k","Block size used in Snappy compression,in the case when Snappy compression codec is used. Lowering this block size will also lower shuffle memory usage when Snappy is used. "
"spark.io.encryption.enabled","SparkOptional","Boolean",,"false","Enable IO encryption. Currently supported by all modes except Mesos. It's recommended that RPC encryption be enabled when using this feature. "
"spark.io.encryption.keygen.algorithm","SparkOptional","Enum","^(RC2|HmacSHA512|HmacSHA384|HmacSHA256|HmacSHA1|HmacMD5|DESede|DES|Blowfish|ARCFOUR|AES)$","HmacSHA1","The algorithm to use when generating the IO encryption key. The supported algorithms are described in the KeyGenerator section of the Java Cryptography Architecture Standard Algorithm Name Documentation. "
"spark.io.encryption.keySizeBits","SparkOptional","Enum","^(128|192|256)$","128","IO encryption key size in bits. Supported values are 128,192 and 256. "
"spark.jars","SparkMandatory","StringList",,,"Comma-separated list of local jars to include on the driver and executor classpaths."
"spark.jars.excludes","SparkOptional","StringList",,,"Comma-separated list of groupId:artifactId, to exclude while resolving the dependencies provided in spark.jars.packages to avoid dependency conflicts."
"spark.jars.ivy","SparkRecommended","StringList",,,"Comma-separated list of additional remote repositories to search for the coordinates given with spark.jars.packages."
"spark.jars.packages","SparkRecommended","StringList",,,"Comma-separated list of maven coordinates of jars to include on the driver and executor classpaths. Will search the local maven repo, then maven central and any additional remote repositories given by spark.jars.ivy. The format for the coordinates should be groupId:artifactId:version."
"spark.kryo.classesToRegister","SparkOptional","StringList","^([a-zA-Z_$][a-zA-Z\d_$]*\.)*[a-zA-Z_$][a-zA-Z\d_$]+$",,"If you use Kryo serialization,give a comma-separated list of custom class names to register with Kryo. See the <a href='tuning.html#data-serialization'>tuning guide</a> for more details. "
"spark.kryo.referenceTracking","SparkOptional","Boolean",,"true","Whether to track references to the same object when serializing data with Kryo,which is necessary if your object graphs have loops and useful for efficiency if they contain multiple copies of the same object. Can be disabled to improve performance if you know this is not the case. "
"spark.kryo.registrationRequired","SparkOptional","Boolean",,"false","Whether to require registration with Kryo. If set to 'true',Kryo will throw an exception if an unregistered class is serialized. If set to false (the default),Kryo will write unregistered class names along with each object. Writing class names can cause significant performance overhead,so enabling this option can enforce strictly that a user has not omitted classes from registration. "
"spark.kryo.registrator","SparkOptional","StringList","^([a-zA-Z_$][a-zA-Z\d_$]*\.)*[a-zA-Z_$][a-zA-Z\d_$]+$",,"If you use Kryo serialization,give a comma-separated list of classes that register your custom classes with Kryo. This property is useful if you need to register your classes in a custom way,e.g. to specify a custom field serializer. Otherwise <code>spark.kryo.classesToRegister</code> is simpler. It should be set to classes that extend <a href='api/scala/index.html#org.apache.spark.serializer.KryoRegistrator'> <code>KryoRegistrator</code></a>. See the <a href='tuning.html#data-serialization'>tuning guide</a> for more details. "
"spark.kryo.unsafe","SparkOptional","Boolean",,"false","Whether to use unsafe based Kryo serializer. Can be substantially faster by using Unsafe Based IO. "
"spark.kryoserializer.buffer","SparkOptional","ByteSize",,"64k","Initial size of Kryo's serialization buffer. Note that there will be one buffer <i>per core</i> on each worker. This buffer will grow up to <code>spark.kryoserializer.buffer.max</code> if needed. "
"spark.kryoserializer.buffer.max","SparkOptional","ByteSize",,"64m","Maximum allowable size of Kryo serialization buffer. This must be larger than any object you attempt to serialize. Increase this if you get a 'buffer limit exceeded' exception inside Kryo. "
"spark.local.dir","SparkMandatory","String","^/((\w|\d)+/)+$","/tmp","Directory to use for 'scratch' space in Spark,including map output files and RDDs that get stored on disk. This should be on a fast,local disk in your system. It can also be a comma-separated list of multiple directories on different disks. NOTE: In Spark 1.0 and later this will be overridden by SPARK_LOCAL_DIRS (Standalone,Mesos) or LOCAL_DIRS (YARN) environment variables set by the cluster manager. "
"spark.locality.wait","SparkOptional","Duration",,"3s","How long to wait to launch a data-local task before giving up and launching it on a less-local node. The same wait will be used to step through multiple locality levels (process-local,node-local,rack-local and then any). It is also possible to customize the waiting time for each level by setting <code>spark.locality.wait.node</code>,etc. You should increase this setting if your tasks are long and see poor locality,but the default usually works well. "
"spark.locality.wait.node","SparkOptional","Duration",,"3s","Customize the locality wait for node locality. For example,you can set this to 0 to skip node locality and search immediately for rack locality (if your cluster has rack information). "
"spark.locality.wait.process","SparkOptional","Duration",,"3s","Customize the locality wait for process locality. This affects tasks that attempt to access cached data in a particular executor process. "
"spark.locality.wait.rack","SparkOptional","Duration",,"3s","Customize the locality wait for rack locality. "
"spark.logConf","SparkOptional","Boolean",,"false","Logs the effective SparkConf as INFO when a SparkContext is started. "
"spark.master","SparkMandatory","Uri(local,spark)",,,"The cluster manager to connect to. See the list of <a href='submitting-applications.html#master-urls'> allowed master URL's</a>. "
"spark.master.rest.port","SparkMandatory","NonNegativeInteger",,"6066","TODO"
"spark.memory.fraction","SparkOptional","Float(0.0,1.0)",,"0.6","Fraction of (heap space - 300MB) used for execution and storage. The lower this is,the more frequently spills and cached data eviction occur. The purpose of this config is to set aside memory for internal metadata,user data structures,and imprecise size estimation in the case of sparse,unusually large records. Leaving this at the default value is recommended. For more detail,including important information about correctly tuning JVM garbage collection when increasing this value,see <a href='tuning.html#memory-management-overview'>this description</a>. "
"spark.memory.offHeap.enabled","SparkOptional","Boolean",,"false","If true,Spark will attempt to use off-heap memory for certain operations. If off-heap memory use is enabled,then <code>spark.memory.offHeap.size</code> must be positive. "
"spark.memory.offHeap.size","SparkOptional","NonNegativeInteger",,"0","The absolute amount of memory in bytes which can be used for off-heap allocation. This setting has no impact on heap memory usage,so if your executors' total memory consumption must fit within some hard limit then be sure to shrink your JVM heap size accordingly. This must be set to a positive value when <code>spark.memory.offHeap.enabled=true</code>. "
"spark.memory.storageFraction","SparkOptional","Float(0.0,1.0)",,"0.5","Amount of storage memory immune to eviction,expressed as a fraction of the size of the region set aside by <code>s​park.memory.fraction</code>. The higher this is,the less working memory may be available to execution and tasks may spill to disk more often. Leaving this at the default value is recommended. For more detail,see <a href='tuning.html#memory-management-overview'>this description</a>. "
"spark.memory.useLegacyMode","SparkOptional","Boolean",,"false","​Whether to enable the legacy memory management mode used in Spark 1.5 and before. The legacy mode rigidly partitions the heap space into fixed-size regions,potentially leading to excessive spilling if the application was not tuned. The following deprecated memory fraction configurations are not read unless this is enabled: <code>spark.shuffle.memoryFraction</code><br> <code>spark.storage.memoryFraction</code><br> <code>spark.storage.unrollFraction</code> "
"spark.modify.acls","SparkOptional","StringList",,,"Comma separated list of users that have modify access to the Spark job. By default only the user that started the Spark job has access to modify it (kill it for example). Putting a '*' in the list means any user can have access to modify it. "
"spark.modify.acls.groups","SparkOptional","StringList",,,"Comma separated list of groups that have modify access to the Spark job. This can be used if you have a set of administrators or developers from the same team to have access to control the job. Putting a '*' in the list means any user in any group has the access to modify the Spark job. The user groups are obtained from the instance of the groups mapping provider specified by <code>spark.user.groups.mapping</code>. Check the entry <code>spark.user.groups.mapping</code> for more details. "
"spark.network.sasl.serverAlwaysEncrypt","SparkOptional","Boolean",,"false","Disable unencrypted connections for services that support SASL authentication. This is currently supported by the external shuffle service. "
"spark.network.timeout","SparkOptional","Duration",,"120s","Default timeout for all network interactions. This config will be used in place of <code>spark.core.connection.ack.wait.timeout</code>,<code>spark.storage.blockManagerSlaveTimeoutMs</code>,<code>spark.shuffle.io.connectionTimeout</code>,<code>spark.rpc.askTimeout</code> or <code>spark.rpc.lookupTimeout</code> if they are not configured. "
"spark.port.maxRetries","SparkOptional","NonNegativeInteger",,"16","Maximum number of retries when binding to a port before giving up. When a port is given a specific value (non 0),each subsequent retry will increment the port used in the previous attempt by 1 before retrying. This essentially allows it to try a range of ports from the start port specified to port + maxRetries. "
"spark.pyspark.driver.python","SparkOptional","String","^python\d\.\d$",,"Python binary executable to use for PySpark in driver. (default is spark.pyspark.python)"
"spark.pyspark.python","SparkOptional","String","^python\d\.\d$",,"Python binary executable to use for PySpark in both driver and executors."
"spark.python.profile","SparkOptional","Boolean",,"false","Enable profiling in Python worker,the profile result will show up by <code>sc.show_profiles()</code>,or it will be displayed before the driver exiting. It also can be dumped into disk by <code>sc.dump_profiles(path)</code>. If some of the profile results had been displayed manually,they will not be displayed automatically before driver exiting. By default the <code>pyspark.profiler.BasicProfiler</code> will be used,but this can be overridden by passing a profiler class in as a parameter to the <code>SparkContext</code> constructor. "
"spark.python.profile.dump","SparkOptional","String","^/((\w|\d)+/)+$",,"The directory which is used to dump the profile result before driver exiting. The results will be dumped as separated file for each RDD. They can be loaded by ptats.Stats(). If this is specified,the profile result will not be displayed automatically. "
"spark.python.worker.memory","SparkOptional","ByteSize",,"512m","Amount of memory to use per python worker process during aggregation,in the same format as JVM memory strings (e.g. <code>512m</code>,<code>2g</code>). If the memory used during aggregation goes above this amount,it will spill the data into disks. "
"spark.python.worker.reuse","SparkOptional","Boolean",,"true","Reuse Python worker or not. If yes,it will use a fixed number of Python workers,does not need to fork() a Python process for every tasks. It will be very useful if there is large broadcast,then the broadcast will not be needed to transferred from JVM to Python worker for every task. "
"spark.r.backendConnectionTimeout","SparkOptional","NonNegativeInteger",,"6000","Connection timeout set by R process on its connection to RBackend in seconds. "
"spark.r.command","SparkOptional","String",,"Rscript","Executable for executing R scripts in cluster modes for both driver and workers. "
"spark.r.driver.command","SparkOptional","String",,"Rscript","Executable for executing R scripts in client modes for driver. Ignored in cluster modes. "
"spark.r.heartBeatInterval","SparkOptional","NonNegativeInteger",,"100","Interval for heartbeats sent from SparkR backend to R process to prevent connection timeout. "
"spark.r.numRBackendThreads","SparkOptional","NonNegativeInteger",,"2","Number of threads used by RBackend to handle RPC calls from SparkR package. "
"spark.r.shell.command","SparkOptional","String",,"R","Executable for executing sparkR shell in client modes for driver. Ignored in cluster modes. It is the same as environment variable <code>SPARKR_DRIVER_R</code>,but take precedence over it. <code>spark.r.shell.command</code> is used for sparkR shell while <code>spark.r.driver.command</code> is used for running R script. "
"spark.rdd.compress","SparkOptional","Boolean",,"false","Whether to compress serialized RDD partitions (e.g. for <code>StorageLevel.MEMORY_ONLY_SER</code> in Java and Scala or <code>StorageLevel.MEMORY_ONLY</code> in Python). Can save substantial space at the cost of some extra CPU time. "
"spark.reducer.maxReqsInFlight","SparkOptional","NonNegativeInteger",,"2147483647","This configuration limits the number of remote requests to fetch blocks at any given point. When the number of hosts in the cluster increase,it might lead to very large number of in-bound connections to one or more nodes,causing the workers to fail under load. By allowing it to limit the number of fetch requests,this scenario can be mitigated. "
"spark.reducer.maxSizeInFlight","SparkOptional","ByteSize",,"48m","Maximum size of map outputs to fetch simultaneously from each reduce task. Since each output requires us to create a buffer to receive it,this represents a fixed memory overhead per reduce task,so keep it small unless you have a large amount of memory. "
"spark.rpc.askTimeout","SparkOptional","Duration",,"120s","Duration for an RPC ask operation to wait before timing out."
"spark.rpc.lookupTimeout","SparkOptional","Duration",,"120s","Duration for an RPC remote endpoint lookup operation to wait before timing out. "
"spark.rpc.message.maxSize","SparkOptional","NonNegativeInteger",,"128","Maximum message size (in MB) to allow in 'control plane' communication; generally only applies to map output size information sent between executors and the driver. Increase this if you are running jobs with many thousands of map and reduce tasks and see messages about the RPC message size. "
"spark.rpc.numRetries","SparkOptional","NonNegativeInteger",,"3","Number of times to retry before an RPC task gives up. An RPC task will run at most times of this number. "
"spark.rpc.retry.wait","SparkOptional","Duration",,"3s","Duration for an RPC ask operation to wait before retrying. "
"spark.scheduler.maxRegisteredResourcesWaitingTime","SparkOptional","Duration",,"30s","Maximum amount of time to wait for resources to register before scheduling begins. "
"spark.scheduler.minRegisteredResourcesRatio","SparkOptional","Float(0.0,1.0)",,,"The minimum ratio of registered resources (registered resources / total expected resources) (resources are executors in yarn mode,CPU cores in standalone mode and Mesos coarsed-grained mode ['spark.cores.max' value is total expected resources for Mesos coarse-grained mode] ) to wait for before scheduling begins. Specified as a double between 0.0 and 1.0. Regardless of whether the minimum ratio of resources has been reached,the maximum amount of time it will wait before scheduling begins is controlled by config <code>spark.scheduler.maxRegisteredResourcesWaitingTime</code>. 0.8 for YARN mode; 0.0 for standalone mode and Mesos coarse-grained mode"
"spark.scheduler.mode","SparkOptional","Enum","^(FAIR|FIFO)$","FIFO","The <a href='job-scheduling.html#scheduling-within-an-application'>scheduling mode</a> between jobs submitted to the same SparkContext. Can be set to <code>FAIR</code> to use fair sharing instead of queueing jobs one after another. Useful for multi-user services. "
"spark.scheduler.revive.interval","SparkOptional","Duration",,"1s","The interval length for the scheduler to revive the worker resource offers to run tasks. "
"spark.serializer","SparkRecommended","String","^([a-zA-Z_$][a-zA-Z\d_$]*\.)*[a-zA-Z_$][a-zA-Z\d_$]+$","org.apache.spark.serializer.JavaSerializer","Class to use for serializing objects that will be sent over the network or need to be cached in serialized form. The default of Java serialization works with any Serializable Java object but is quite slow, so we recommend using org.apache.spark.serializer.KryoSerializer and configuring Kryo serialization when speed is necessary. Can be any subclass of org.apache.spark.Serializer."
"spark.serializer.objectStreamReset","SparkOptional","NonNegativeInteger",,"100","When serializing using org.apache.spark.serializer.JavaSerializer,the serializer caches objects to prevent writing redundant data,however that stops garbage collection of those objects. By calling 'reset' you flush that info from the serializer,and allow old objects to be collected. To turn off this periodic reset set it to -1. By default it will reset the serializer every 100 objects. "
"spark.shuffle.compress","SparkOptional","Boolean",,"true","Whether to compress map output files. Generally a good idea. Compression will use <code>spark.io.compression.codec</code>. "
"spark.shuffle.consolidateFiles","SparkOptional","Boolean",,"false","If set to ""true"", consolidates intermediate files created during a shuffle. Creating fewer files can improve filesystem performance for shuffles with large numbers of reduce tasks. It is recommended to set this to ""true"" when using ext4 or xfs filesystems. On ext3, this option might degrade performance on machines with many (>8) cores due to filesystem limitations."
"spark.shuffle.file.buffer","SparkOptional","ByteSize",,"32k","Size of the in-memory buffer for each shuffle file output stream. These buffers reduce the number of disk seeks and system calls made in creating intermediate shuffle files. "
"spark.shuffle.io.maxRetries","SparkOptional","NonNegativeInteger",,"3","(Netty only) Fetches that fail due to IO-related exceptions are automatically retried if this is set to a non-zero value. This retry logic helps stabilize large shuffles in the face of long GC pauses or transient network connectivity issues. "
"spark.shuffle.io.numConnectionsPerPeer","SparkOptional","NonNegativeInteger",,"1","(Netty only) Connections between hosts are reused in order to reduce connection buildup for large clusters. For clusters with many hard disks and few hosts,this may result in insufficient concurrency to saturate all disks,and so users may consider increasing this value. "
"spark.shuffle.io.preferDirectBufs","SparkOptional","Boolean",,"true","(Netty only) Off-heap buffers are used to reduce garbage collection during shuffle and cache block transfer. For environments where off-heap memory is tightly limited,users may wish to turn this off to force all allocations from Netty to be on-heap. "
"spark.shuffle.io.retryWait","SparkOptional","Duration",,"5s","(Netty only) How long to wait between retries of fetches. The maximum delay caused by retrying is 15 seconds by default,calculated as <code>maxRetries * retryWait</code>. "
"spark.shuffle.manager","SparkOptional","Enum","^(sort|hash)$","sort","Implementation to use for shuffling data. There are two implementations available: sort and hash. Sort-based shuffle is more memory-efficient and is the default option starting in 1.2."
"spark.shuffle.memoryFraction","SparkOptional","Float(0.0,1.0)",,"0.2","(deprecated) This is read only if <code>spark.memory.useLegacyMode</code> is enabled. Fraction of Java heap to use for aggregation and cogroups during shuffles. At any given time,the collective size of all in-memory maps used for shuffles is bounded by this limit,beyond which the contents will begin to spill to disk. If spills are often,consider increasing this value at the expense of <code>spark.storage.memoryFraction</code>. "
"spark.shuffle.service.enabled","SparkOptional","Boolean",,"false","Enables the external shuffle service. This service preserves the shuffle files written by executors so the executors can be safely removed. This must be enabled if <code>spark.dynamicAllocation.enabled</code> is 'true'. The external shuffle service must be set up in order to enable it. See <a href='job-scheduling.html#configuration-and-setup'>dynamic allocation configuration and setup documentation</a> for more information. "
"spark.shuffle.service.index.cache.entries","SparkOptional","NonNegativeInteger",,"1024","Max number of entries to keep in the index cache of the shuffle service. "
"spark.shuffle.service.port","SparkOptional","NonNegativeInteger",,"7337","Port on which the external shuffle service will run. "
"spark.shuffle.sort.bypassMergeThreshold","SparkOptional","NonNegativeInteger",,"200","(Advanced) In the sort-based shuffle manager,avoid merge-sorting data if there is no map-side aggregation and there are at most this many reduce partitions. "
"spark.shuffle.spill","SparkOptional","Boolean",,"true","If set to ""true"", limits the amount of memory used during reduces by spilling data out to disk. This spilling threshold is specified by spark.shuffle.memoryFraction."
"spark.shuffle.spill.compress","SparkOptional","Boolean",,"true","Whether to compress data spilled during shuffles. Compression will use <code>spark.io.compression.codec</code>. "
"spark.speculation","SparkOptional","Boolean",,"false","If set to 'true',performs speculative execution of tasks. This means if one or more tasks are running slowly in a stage,they will be re-launched. "
"spark.speculation.interval","SparkOptional","Duration",,"100ms","How often Spark will check for tasks to speculate. "
"spark.speculation.multiplier","SparkOptional","Float",,"1.5","How many times slower a task is than the median to be considered for speculation. "
"spark.speculation.quantile","SparkOptional","Float(0.0,1.0)",,"0.75","Fraction of tasks which must be complete before speculation is enabled for a particular stage. "
"spark.sql.ui.retainedExecutions","SparkOptional","NonNegativeInteger",,"1000","How many finished executions the Spark UI and status APIs remember before garbage collecting. "
"spark.ssl.enabled","SparkOptional","Boolean",,"false","<p>Whether to enable SSL connections on all supported protocols.</p> <p>When <code>spark.ssl.enabled</code> is configured,<code>spark.ssl.protocol</code> is required.</p> <p>All the SSL settings like <code>spark.ssl.xxx</code> where <code>xxx</code> is a particular configuration property,denote the global configuration for all the supported protocols. In order to override the global configuration for the particular protocol,the properties must be overwritten in the protocol-specific namespace.</p> <p>Use <code>spark.ssl.YYY.XXX</code> settings to overwrite the global configuration for particular protocol denoted by <code>YYY</code>. Example values for <code>YYY</code> include <code>fs</code>,<code>ui</code>,<code>standalone</code>,and <code>historyServer</code>. See <a href='security.html#ssl-configuration'>SSL Configuration</a> for details on hierarchical SSL configuration for services.</p> "
"spark.ssl.enabledAlgorithms","SparkOptional","StringList",,,"A comma separated list of ciphers. The specified ciphers must be supported by JVM. The reference list of protocols one can find on <a href='https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https'>this</a> page. Note: If not set,it will use the default cipher suites of JVM. "
"spark.ssl.keyPassword","SparkOptional","String",,,"A password to the private key in key-store. "
"spark.ssl.keyStore","SparkOptional","String",,,"A path to a key-store file. The path can be absolute or relative to the directory where the component is started in. "
"spark.ssl.keyStorePassword","SparkOptional","String",,,"A password to the key-store. "
"spark.ssl.keyStoreType","SparkOptional","String",,"JKS","The type of the key-store.  (we do not recommend changing this value)"
"spark.ssl.needClientAuth","SparkOptional","Boolean",,"false","Set true if SSL needs client authentication. "
"spark.ssl.protocol","SparkOptional","Enum","^(TLSv1.2|TLSv1.1|TLSv1|SSLv3)$",,"A protocol name. The protocol must be supported by JVM. The reference list of protocols one can find on <a href='https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https'>this</a> page. "
"spark.ssl.trustStore","SparkOptional","String",,,"A path to a trust-store file. The path can be absolute or relative to the directory where the component is started in. "
"spark.ssl.trustStorePassword","SparkOptional","String",,,"A password to the trust-store. "
"spark.ssl.trustStoreType","SparkOptional","String",,"JKS","The type of the trust-store.  (we do not recommend changing this value)"
"spark.storage.memoryFraction","SparkOptional","Float(0.0,1.0)",,"0.6","(deprecated) This is read only if <code>spark.memory.useLegacyMode</code> is enabled. Fraction of Java heap to use for Spark's memory cache. This should not be larger than the 'old' generation of objects in the JVM,which by default is given 0.6 of the heap,but you can increase it if you configure your own old generation size. "
"spark.storage.memoryMapThreshold","SparkOptional","ByteSize",,"2m","Size of a block above which Spark memory maps when reading a block from disk. This prevents Spark from memory mapping very small blocks. In general,memory mapping has high overhead for blocks close to or below the page size of the operating system. "
"spark.storage.unrollFraction","SparkOptional","Float(0.0,1.0)",,"0.2","(deprecated) This is read only if <code>spark.memory.useLegacyMode</code> is enabled. Fraction of <code>spark.storage.memoryFraction</code> to use for unrolling blocks in memory. This is dynamically allocated by dropping existing blocks when there is not enough free storage space to unroll the new block in its entirety. "
"spark.streaming.backpressure.enabled","SparkOptional","Boolean",,"false","Enables or disables Spark Streaming's internal backpressure mechanism (since 1.5). This enables the Spark Streaming to control the receiving rate based on the current batch scheduling delays and processing times so that the system receives only as fast as the system can process. Internally,this dynamically sets the maximum receiving rate of receivers. This rate is upper bounded by the values <code>spark.streaming.receiver.maxRate</code> and <code>spark.streaming.kafka.maxRatePerPartition</code> if they are set (see below). "
"spark.streaming.backpressure.initialRate","SparkOptional","NonNegativeInteger",,,"This is the initial maximum receiving rate at which each receiver will receive data for the first batch when the backpressure mechanism is enabled. "
"spark.streaming.blockInterval","SparkOptional","Duration",,"200ms","Interval at which data received by Spark Streaming receivers is chunked into blocks of data before storing them in Spark. Minimum recommended - 50 ms. See the <a href='streaming-programming-guide.html#level-of-parallelism-in-data-receiving'>performance tuning</a> section in the Spark Streaming programing guide for more details. "
"spark.streaming.driver.writeAheadLog.closeFileAfterWrite","SparkOptional","Boolean",,"false","Whether to close the file after writing a write ahead log record on the driver. Set this to 'true' when you want to use S3 (or any file system that does not support flushing) for the metadata WAL on the driver. "
"spark.streaming.kafka.maxRatePerPartition","SparkOptional","NonNegativeInteger",,,"Maximum rate (number of records per second) at which data will be read from each Kafka partition when using the new Kafka direct stream API. See the <a href='streaming-kafka-integration.html'>Kafka Integration guide</a> for more details. "
"spark.streaming.kafka.maxRetries","SparkOptional","NonNegativeInteger",,"1","Maximum number of consecutive retries the driver will make in order to find the latest offsets on the leader of each partition (a default value of 1 means that the driver will make a maximum of 2 attempts). Only applies to the new Kafka direct stream API. "
"spark.streaming.receiver.maxRate","SparkOptional","NonNegativeInteger",,,"Maximum rate (number of records per second) at which each receiver will receive data. Effectively,each stream will consume at most this number of records per second. Setting this configuration to 0 or a negative number will put no limit on the rate. See the <a href='streaming-programming-guide.html#deploying-applications'>deployment guide</a> in the Spark Streaming programing guide for mode details. "
"spark.streaming.receiver.writeAheadLog.closeFileAfterWrite","SparkOptional","Boolean",,"false","Whether to close the file after writing a write ahead log record on the receivers. Set this to 'true' when you want to use S3 (or any file system that does not support flushing) for the data WAL on the receivers. "
"spark.streaming.receiver.writeAheadLog.enable","SparkOptional","Boolean",,"false","Enable write ahead logs for receivers. All the input data received through receivers will be saved to write ahead logs that will allow it to be recovered after driver failures. See the <a href='streaming-programming-guide.html#deploying-applications'>deployment guide</a> in the Spark Streaming programing guide for more details. "
"spark.streaming.stopGracefullyOnShutdown","SparkOptional","Boolean",,"false","If <code>true</code>,Spark shuts down the <code>StreamingContext</code> gracefully on JVM shutdown rather than immediately. "
"spark.streaming.ui.retainedBatches","SparkOptional","NonNegativeInteger",,"1000","How many finished batches the Spark UI and status APIs remember before garbage collecting. "
"spark.streaming.unpersist","SparkOptional","Boolean",,"true","Force RDDs generated and persisted by Spark Streaming to be automatically unpersisted from Spark's memory. The raw input data received by Spark Streaming is also automatically cleared. Setting this to false will allow the raw data and persisted RDDs to be accessible outside the streaming application as they will not be cleared automatically. But it comes at the cost of higher memory usage in Spark. "
"spark.submit.deployMode","SparkMandatory","Enum","^(client|cluster)$",,"The deploy mode of Spark driver program,either 'client' or 'cluster',Which means to launch driver program locally ('client') or remotely ('cluster') on one of the nodes inside the cluster. "
"spark.task.cpus","SparkOptional","NonNegativeInteger",,"1","Number of cores to allocate for each task. "
"spark.task.maxFailures","SparkOptional","NonNegativeInteger",,"4","Number of failures of any particular task before giving up on the job. The total number of failures spread across different tasks will not cause the job to fail; a particular task has to fail this number of attempts. Should be greater than or equal to 1. Number of allowed retries = this value - 1. "
"spark.ui.enabled","SparkOptional","Boolean",,"true","Whether to run the web UI for the Spark application. "
"spark.ui.filters","SparkOptional","StringList","^([a-zA-Z_$][a-zA-Z\d_$]*\.)*[a-zA-Z_$][a-zA-Z\d_$]+$",,"Comma separated list of filter class names to apply to the Spark web UI. The filter should be a standard <a href='http://docs.oracle.com/javaee/6/api/javax/servlet/Filter.html'> javax servlet Filter</a>. Parameters to each filter can also be specified by setting a java system property of: <br> <code>spark.&lt;class name of filter&gt;.params='param1=value1,param2=value2'</code><br> For example: <br> <code>-Dspark.ui.filters=com.test.filter1</code> <br> <code>-Dspark.com.test.filter1.params='param1=foo,param2=testing'</code> "
"spark.ui.killEnabled","SparkOptional","Boolean",,"true","Allows jobs and stages to be killed from the web UI. "
"spark.ui.port","SparkOptional","NonNegativeInteger",,"4040","Port for your application's dashboard,which shows memory and workload data. "
"spark.ui.retainedDeadExecutors","SparkOptional","NonNegativeInteger",,"100","How many dead executors the Spark UI and status APIs remember before garbage collecting. "
"spark.ui.retainedJobs","SparkOptional","NonNegativeInteger",,"1000","How many jobs the Spark UI and status APIs remember before garbage collecting. "
"spark.ui.retainedStages","SparkOptional","NonNegativeInteger",,"1000","How many stages the Spark UI and status APIs remember before garbage collecting. "
"spark.ui.retainedTasks","SparkOptional","NonNegativeInteger",,"100000","How many tasks the Spark UI and status APIs remember before garbage collecting. "
"spark.ui.reverseProxy","SparkOptional","Boolean",,"false","Enable running Spark Master as reverse proxy for worker and application UIs. In this mode,Spark master will reverse proxy the worker and application UIs to enable access without requiring direct access to their hosts. Use it with caution,as worker and application UI will not be accessible directly,you will only be able to access them through spark master/proxy public URL. This setting affects all the workers and application UIs running in the cluster and must be set on all the workers,drivers and masters. "
"spark.ui.reverseProxyUrl","SparkOptional","Uri(http,https)",,,"This is the URL where your proxy is running. This URL is for proxy which is running in front of Spark Master. This is useful when running proxy for authentication e.g. OAuth proxy. Make sure this is a complete URL including scheme (http/https) and port to reach your proxy."
"spark.ui.view.acls","SparkOptional","StringList",,,"Comma separated list of users that have view access to the Spark web ui. By default only the user that started the Spark job has view access. Putting a '*' in the list means any user can have view access to this Spark job. "
"spark.ui.view.acls.groups","SparkOptional","StringList",,,"Comma separated list of groups that have view access to the Spark web ui to view the Spark Job details. This can be used if you have a set of administrators or developers or users who can monitor the Spark job submitted. Putting a '*' in the list means any user in any group can view the Spark job details on the Spark web ui. The user groups are obtained from the instance of the groups mapping provider specified by <code>spark.user.groups.mapping</code>. Check the entry <code>spark.user.groups.mapping</code> for more details. "
"spark.user.groups.mapping","SparkOptional","String",,"org.apache.spark.security.ShellBasedGroupsMappingProvider","The list of groups for a user are determined by a group mapping service defined by the trait org.apache.spark.security.GroupMappingServiceProvider which can configured by this property. A default unix shell based implementation is provided org.apache.spark.security.ShellBasedGroupsMappingProvider which can be specified to resolve a list of groups for a user. Note: This implementation supports only a Unix/Linux based environment. Windows environment is currently not supported. However, a new platform/protocol can be supported by implementing the trait org.apache.spark.security.GroupMappingServiceProvider."
"spark.worker.ui.retainedDrivers","SparkOptional","NonNegativeInteger",,"1000","How many finished drivers the Spark UI and status APIs remember before garbage collecting. "
"spark.worker.ui.retainedExecutors","SparkOptional","NonNegativeInteger",,"1000","How many finished executors the Spark UI and status APIs remember before garbage collecting. "
"spark.usecase.pipeline.initializer","UsecaseMandatory","String","^([a-zA-Z_$][a-zA-Z\d_$]*\.)*[a-zA-Z_$][a-zA-Z\d_$]+$",,"Define the class which starts the Pipeline pertaining to this usecase (containing a main method)."
"spark.usecase.filemanager.inputdir","UsecaseMandatory","Uri(file,htfs)",,,"The input directory for the Spark Master. (Maybe needs additional uri schemes)"
"spark.usecase.filemanager.inputfiles","UsecaseMandatory","StringList",,,"This files in the input directory used as input (without path)."
"spark.usecase.filemanager.outputdir","UsecaseMandatory","Uri(file,htfs)",,,"The iutputnpout directory for the Spark Master. (Maybe needs additional uri schemes)"
"spark.usecase.filemanager.filePattern","UsecaseOptional","String",,,"The filename pattern used to create the output files. If multiple files are created, using the $key position parameter will insert the partition key at this location in the String (see spark.dbpedialinks.pairRddKeys)."
"spark.usecase.pairRddKeys","UsecaseOptional","StringList","^[^\s]+$",,"A comma separated list of keys, which are used to partition the result along these keys. This is used to create multiple well defined output files. Using the $key parameter in the spark.usecase.filemanager.filePattern String will dynamically created the output file names containing these keys."
"spark.usecase.filemanager.compression","UsecaseOptional","Enum","^(bz2|gz|snappy|lzo)$",,"If provided, all result files will be compressed in the format according to the following map: TODO"
